generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
  binaryTargets   = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Note {
  id           String         @id @default(cuid())
  branch       Branch         @relation(fields: [branchId], references: [id], onDelete: Cascade)
  branchId     String
  title        String
  author       User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId     String
  mediaId      String?
  media        Movie?         @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  text         String
  locked       Boolean        @default(false)
  size         Int            @default(0)
  updatedAt    DateTime       @updatedAt
  TagNotes     TagNotes[]
  Image        Image[]
  YoutubeVideo YoutubeVideo[]
  imageSection Boolean        @default(true)
  embedSection Boolean        @default(true)
}

model Movie {
  id    String @id
  title String
  year  Int
  img   String
  Note  Note[]
}

model Branch {
  id    String @id @default(cuid())
  title String
  Note  Note[]
  Tag   Tag[]
  color String
}

model Tag {
  id        String     @id @default(cuid())
  isDefault Boolean    @default(false)
  user      User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?
  name      String
  branch    Branch     @relation(fields: [branchId], references: [id], onDelete: Cascade)
  branchId  String
  TagNotes  TagNotes[]
  createdAt DateTime   @default(now())
}

model TagNotes {
  id     String @id @default(cuid())
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId  String
  note   Note   @relation(fields: [noteId], references: [id], onDelete: Cascade)
  noteId String
}

model Image {
  id        String   @id @default(cuid())
  url       String   @unique
  createdAt DateTime @default(now())
  note      Note?    @relation(fields: [noteId], references: [id], onDelete: Cascade)
  noteId    String?
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Note          Note[]
  Tag           Tag[]
  active        Boolean   @default(true)
  premium       Boolean   @default(false)
  apiToken      String?   @unique @default(cuid())
  customerId    String?   @unique
  Search        Search[]
}

model YoutubeVideo {
  id        String   @id @default(cuid())
  videoId   String
  title     String
  thumbnail String
  channel   String
  duration  String
  createdAt DateTime @default(now())
  note      Note?    @relation(fields: [noteId], references: [id], onDelete: Cascade)
  noteId    String?

  @@unique([videoId, noteId])
}

model Search {
  id        String   @id @default(cuid())
  userId    String
  query     String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
